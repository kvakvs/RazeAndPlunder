#pragma once

#include "MainAgents/BaseAgent.h"


// Helper class for the NavigationAgent. Contains methods to calculate the 
// potentials generated by own units, enemy units and neutral objects in 
// specific points.
//
// Author: Johan Hagelback (johan.hagelback@gmail.com)
//
class PFFunctions {

private:

public:

  // Returns the distance between two positions. 
  static float get_distance(BWAPI::WalkPosition w1, 
                            BWAPI::WalkPosition w2);

  // Returns the distance between a unit and a position. 
  static float get_distance(BWAPI::WalkPosition wt, 
                            BWAPI::Unit unit);

  // Calculates the potential otherOwnUnit generates around unit at distance d. 
  static float calc_own_unit_p(float d, 
                               BWAPI::WalkPosition wt, 
                               BWAPI::Unit unit,
                               BWAPI::Unit otherOwnUnit);

  // Calculates the terrain potential in a position. 
  static float get_terrain_p(const BaseAgent* agent,
                             BWAPI::WalkPosition wt);

  // Calculates the trail potential in a position. Trails are used to reduce the local
  // optima problem when using potential fields. 
  static float get_trail_p(const BaseAgent* agent,
                           BWAPI::WalkPosition wt);

  // Calculates the goal potential for a defending unit. 
  static float get_goal_p(const BaseAgent* agent,
                          BWAPI::WalkPosition wt);

  // Calculates the potential an offensive attacking unit generates at distance d around an enemy unit. 
  static float calc_offensive_unit_p(float d, 
                                     BWAPI::Unit attacker,
                                     BWAPI::Unit enemy);

  // Calculates the potential a defensive attacking unit generates at distance d around an enemy unit. 
  static float calc_defensive_unit_p(float d, 
                                     BWAPI::Unit attacker,
                                     BWAPI::Unit enemy);

  // Returns true if the own unit can attack the target. 
  static bool can_attack(BWAPI::Unit ownUnit, BWAPI::Unit target);

  // Returns the max range for the unit targeting ground. 
  static int get_ground_range(BWAPI::Unit cUnit);

  // Returns the max range for the unit targeting air. 
  static int get_air_range(BWAPI::Unit cUnit);

};
